(function() {
  const penIcon = `<i class="bi bi-pencil"></i>`;
  const trashIcon = `<i class="bi bi-trash"></i>`;
  const editIcon = `<i class="bi bi-pencil-square"></i>`;

  function editableFormatter(value, row, index, field) {
    return `<span class="editable-span" data-field="${field}" style="cursor:pointer;">${value}${penIcon}</span>`;
  }

  function representativeFormatter(value, row, index) {
    const repNames = value.map(rep => rep.username + ' (' + rep.email + ')').join(', ');
    return `<span class="representatives-editable-span" data-field="representatives" style="cursor:pointer;">${repNames}${penIcon}</span>`;
  }

  function actionFormatter(value, row, index) {
    return `
      <button type="button" class="btn btn-sm btn-outline-primary edit-row" data-id="${row.id}" title="Редактировать">${editIcon}</button>
      <button type="button" class="btn btn-sm btn-outline-danger delete-row" data-id="${row.id}" title="Удалить">${trashIcon}</button>
    `;
  }

  $(document).ready(function() {
    $('#dynamic-table').bootstrapTable({
      search: true,
      pagination: true,
      pageList: [10, 25, 50, 100, "All"],
      sidePagination: 'server',
      columns: [
        {
          field: 'id',
          title: 'ID',
          sortable: true,
        },
        {
          field: 'firmname',
          title: 'Наименование',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'firmname');
          }
        },
        {
          field: 'address',
          title: 'Адрес',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'address');
          }
        },
        {
          field: 'representatives',
          title: 'Представители',
          sortable: true,
          formatter: function(value, row, index) {
            return representativeFormatter(value, row, index);
          }
        },
        {
          field: 'contact_number',
          title: 'Телефон',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'contact_number');
          }
        },
        {
          field: 'actions',
          title: 'Действия',
          align: 'center',
          clickToSelect: false,
          formatter: actionFormatter
        }
      ],

      url: `{{ path('api_admin_partners_list') }}`,
      method: 'GET',
      contentType: 'application/json',

      showFooter: true, 
      showColumns: true,
      showRefresh: true,
      showToggle: true,
      showFullscreen: true,

      responseHandler: function(res) {
        return {
          total: res.totalElements,
          rows: res.content
        };
      },

      onLoadError: function(status, jqXHR) {
        console.error('Error loading data:', status, jqXHR);
        alert('Error loading data. Please try again.');
      }
    });

    // Модальное окно добавления
    const itemModal = new bootstrap.Modal(document.getElementById('itemModal'));
    $('#add-item-btn').on('click', function() {
      $('#itemModalLabel').text('Добавить партнера');
      $('#item-id').val('');
      $('#item-firmname').val('');
      $('#item-address').val('');
      $('#item-contact_number').val('');
      $('#item-representatives').val(null).trigger('change');
      itemModal.show();
    });

    // Модальное окно редактирования
    $(document).on('click', '.edit-row', function() {
      const partnerId = $(this).data('id');
      const row = $('#dynamic-table').bootstrapTable('getData').find(r => r.id == partnerId);
      if (!row) return;
      $('#itemModalLabel').text('Редактировать партнера');
      $('#item-id').val(row.id);
      $('#item-firmname').val(row.firmname);
      $('#item-address').val(row.address);
      $('#item-contact_number').val(row.contact_number);
      // Поле с перечислением
      $('#item-representatives').empty();
      if (row.representatives && row.representatives.length > 0) {
        row.representatives.forEach(function(rep) {
          const option = new Option(rep.username + ' (' + rep.email + ')', rep.id, true, true);
          $('#item-representatives').append(option);
        });
      }
      $('#item-representatives').trigger('change');
      itemModal.show();
    });

    // Сохранить модальное окно
    $('#item-form').on('submit', function(e) {
      e.preventDefault();
      const id = $('#item-id').val();
      const data = {
        firmname: $('#item-firmname').val(),
        address: $('#item-address').val(),
        contact_number: $('#item-contact_number').val(),
        representatives: $('#item-representatives').val() || []
      };
      let url, type;
      if (id) {
        url = `{{ path('api_admin_partners_update', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', id);
        type = 'PUT';
      } else {
        url = `{{ path('api_admin_partners_create') }}`;
        type = 'POST';
      }
      $.ajax({
        url: url,
        type: type,
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function(response) {
          itemModal.hide();
          $('#dynamic-table').bootstrapTable('refresh');
        },
        error: function(xhr) {
          alert('Ошибка при сохранении!');
        }
      });
    });

    // Удаление строки
    $(document).on('click', '.delete-row', function() {
      if (!confirm('Вы уверены, что хотите удалить эту запись?')) return;
      const partnerId = $(this).data('id');
      const url = `{{ path('api_admin_partners_delete', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', partnerId);

      $.ajax({
        url: url,
        type: 'DELETE',
        success: function(response) {
          $('#dynamic-table').bootstrapTable('refresh');
        },
        error: function(xhr) {
          alert('Ошибка при удалении!');
        }
      });
    });

    // Инлайн-редактирование
    $(document).on('click', '.editable-span', function() {
      const $span = $(this);
      const value = $span.text().replace(/[\u{1F58A}-\u{1F58C}]|<svg[\s\S]*?<\/svg>/gu, '').trim();
      const field = $span.data('field');
      let inputType = 'text';
      let step = '';
      $span.replaceWith(
        `<input type="${inputType}" class="form-control editable-input" data-field="${field}" value="${value}" ${step} style="width: 100%; display:inline;">`
      );
      $('.editable-input').focus();
    });

    // Сохранение изменений в другие поля
    function saveEdit($input) {
      const newValue = $input.val();
      const field = $input.data('field');
      const $tr = $input.closest('tr');
      const rowIndex = $tr.data('index');
      const rowData = $('#dynamic-table').bootstrapTable('getData')[rowIndex];
      const partnerId = rowData.id;
      const url = `{{ path('api_admin_partners_update', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', partnerId);

      let data = {};
      data[field] = newValue;

      $.ajax({
        url: url,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function(response) {
          $('#dynamic-table').bootstrapTable('refresh');
        },
        error: function(xhr) {
          alert('Ошибка при обновлении!');
        }
      });

      $input.replaceWith(editableFormatter(newValue, rowData, rowIndex, field));
    }

    // Инициализация select2 для представителей
    $('#item-representatives').select2({
      width: '100%',
      placeholder: 'Выберите представителей',
      allowClear: true,
      multiple: true,
      ajax: {
        delay: 250,
        url: function() {
          const id = $('#item-id').val() || 0;
          return `{{ path('api_admin_partners_search_representatives', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', id);
        },
        dataType: 'json',
        data: function(params) {
          return { q: params.term };
        },
        processResults: function(data) {
          return { results: data };
        },
        cache: true
      },
      dropdownParent: $('#itemModal')
    });

    // Инлайн-редактирование представителей
    $(document).on('click', '.representatives-editable-span', function() {
      const $span = $(this);
      const $tr = $span.closest('tr');
      const rowIndex = $tr.data('index');
      const rowData = $('#dynamic-table').bootstrapTable('getData')[rowIndex];
      // Формируем select с текущими значениями
      let selectHtml = `<select class="form-control editable-representatives-select" multiple style="width: 100%; display:inline;"></select>`;
      $span.replaceWith(selectHtml);
      const $select = $('.editable-representatives-select');
      // Добавляем текущих представителей
      if (rowData.representatives && rowData.representatives.length > 0) {
        rowData.representatives.forEach(function(rep) {
          const option = new Option(rep.username + ' (' + rep.email + ')', rep.id, true, true);
          $select.append(option);
        });
      }
      $select.select2({
        width: '100%',
        placeholder: 'Выберите представителей',
        allowClear: true,
        multiple: true,
        ajax: {
          delay: 250,
          url: function() {
            const id = rowData.id;
            return `{{ path('api_admin_partners_search_representatives', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', id);
          },
          dataType: 'json',
          data: function(params) {
            return { q: params.term };
          },
          processResults: function(data) {
            return { results: data };
          },
          cache: true
        },
        dropdownParent: $tr
      }).select2('open');
      $select.on('select2:close', function() {
        saveRepresentativesEdit($select, rowIndex);
      });
      $select.on('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          $select.blur();
        }
      });
    });

    // Сохранение изменений в представителях
    function saveRepresentativesEdit($select, rowIndex) {
      const newIds = $select.val() || [];
      const $tr = $select.closest('tr');
      const rowData = $('#dynamic-table').bootstrapTable('getData')[rowIndex];
      const partnerId = rowData.id;
      const url = `{{ path('api_admin_partners_update', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', partnerId);
      $.ajax({
        url: url,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify({ representatives: newIds }),
        success: function(response) {
          $('#dynamic-table').bootstrapTable('refresh');
        },
        error: function(xhr) {
          alert('Ошибка при обновлении представителей!');
        }
      });
      // Отображаем выбранные значения сразу (без ожидания refresh)
      const selectedData = $select.select2('data');
      const repNames = selectedData.map(rep => rep.text).join(', ');
      $select.replaceWith(`<span class="representatives-editable-span" data-field="representatives" style="cursor:pointer;">${repNames}${penIcon}</span>`);
    }

    $(document).on('blur', '.editable-input', function() {
      saveEdit($(this));
    });
    $(document).on('keydown', '.editable-input', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        $(this).blur();
      }
    });
  });
})();