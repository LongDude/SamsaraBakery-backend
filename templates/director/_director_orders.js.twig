  (function() {
  const penIcon = `<i class="bi bi-pencil"></i>`;
  const trashIcon = `<i class="bi bi-trash"></i>`;
  const editIcon = `<i class="bi bi-pencil-square"></i>`;


  const allStatuses = [
    { value: 'Order recieved', text: 'Принято' },
    { value: 'Order processing', text: 'Обработка' },
    { value: 'Order approved', text: 'Утверждено' },
    { value: 'Order in production', text: 'В производстве' },
    { value: 'Order is in storage', text: 'В складе' },
    { value: 'Order being delivered', text: 'В доставке' },
    { value: 'Order delivered', text: 'Доставлено' },
    { value: 'Order closed', text: 'Закрыто' }
  ];

  function editableFormatter(value, row, index, field) {
    if (field === 'status') {
      const display = allStatuses.find(s => s.value === value)?.text;
      if (row.status !== 'Order closed') {
        return `<span class="editable-span" data-field="${field}" style="cursor:pointer;">${display}${penIcon}</span>`;
      } else {
        return `<span>${display}</span>`;
      }
    }

    if (row.status === 'Order recieved' || row.status === 'Order processing') {
      return `<span class="editable-span" data-field="${field}" style="cursor:pointer;">${value}${penIcon}</span>`;
    } else {
      return `<span>${value}</span>`;
    }
  }

  function actionFormatter(value, row, index) {
    // Разрешаем редактирование и удаление только для статусов 'Order recieved' и 'Order processing'
    if (row.status === 'Order recieved' || row.status === 'Order processing') {
      return `
        
        <button type="button" class="btn btn-sm btn-outline-primary edit-row" data-id="${row.order_id}" title="Редактировать">${editIcon}</button>
        <button type="button" class="btn btn-sm btn-outline-danger delete-row" data-id="${row.order_id}" title="Удалить">${trashIcon}</button>
      `;
    } else {
      return `
        <span></span>
      `;
    }
  }

  let statusFilter = '';
  let dateFromFilter = '';
  let dateToFilter = '';

  $(document).ready(function() {
    $('#dynamic-table').bootstrapTable({
      search: true,
      pagination: true,
      pageList: [10, 25, 50, 100, "All"],
      sidePagination: 'server',
      columns: [
        {
          field: 'order_id',
          title: 'ID',
          sortable: true,
          visible: false,
        },
        {
          field: 'partner_firmname',
          title: 'Партнер',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'partner_firmname');
          }
        },
        {
          field: 'product',
          title: 'Продукт',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'product');
          }
        },
        {
          field: 'price',
          title: 'Цена',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'price');
          }
        },
        {
          field: 'quantity',
          title: 'Количество',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'quantity');
          }
        },
        {
          field: 'status',
          title: 'Статус <button type="button" class="btn btn-sm btn-outline-secondary ms-1 status-filter-btn" title="Фильтр"><i class="bi bi-funnel"></i></button>',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'status');
          }
        },
        {
          field: 'date',
          title: 'Дата <button type="button" class="btn btn-sm btn-outline-secondary ms-1 date-filter-btn" title="Фильтр"><i class="bi bi-funnel"></i></button>',
          sortable: true,
          formatter: function(value, row, index) {
            return editableFormatter(value, row, index, 'date');
          }
        },
        {
          field: 'actions',
          title: 'Действия',
          align: 'center',
          clickToSelect: false,
          formatter: actionFormatter
        }
      ],

      url: `{{ path('api_director_orders_list') }}`,
      method: 'GET',
      contentType: 'application/json',

      showFooter: true, 
      showColumns: true,
      showRefresh: true,
      showToggle: true,
      showFullscreen: true,

      responseHandler: function(res) {
        return {
          total: res.totalElements,
          rows: res.content
        };
      },

      onLoadError: function(status, jqXHR) {
        console.error('Error loading data:', status, jqXHR);
        alert('Error loading data. Please try again.');
      },

      queryParams: function(params) {
        params.status = statusFilter;
        params.date_from = dateFromFilter;
        params.date_to = dateToFilter;
        // Для отладки
        console.log('queryParams:', params);
        return params;
      }
    });

    // Кнопка "Добавить товар"
    const itemModal = new bootstrap.Modal(document.getElementById('itemModal'));
    $('#add-item-btn').on('click', function() {
      $('#itemModalLabel').text('Добавить заказ');
      $('#item-id').val('');
      $('#item-partner_firmname').val('');
      $('#item-product').val('');
      $('#item-price').val('');
      $('#item-quantity').val('');
      $('#item-status').val('Order recieved'); // По умолчанию статус 'Принято'
      $('#item-date').val('');
      itemModal.show();
    });

    // Кнопка "Редактировать" (в модальном)
    $(document).on('click', '.edit-row', function() {
      const productId = $(this).data('id');
      const row = $('#dynamic-table').bootstrapTable('getData').find(r => r.order_id == productId);
      if (!row) return;
      $('#itemModalLabel').text('Редактировать заказ');
      $('#item-id').val(row.order_id);
      $('#item-partner_firmname').val(row.partner_firmname);
      $('#item-product').val(row.product);
      $('#item-price').val(row.price);
      $('#item-quantity').val(row.quantity);
      $('#item-status').val(row.status);
      $('#item-date').val(row.date);
      itemModal.show();
    });

    // Сохранить (добавить или обновить)
    $('#item-form').on('submit', function(e) {
      e.preventDefault();
      const id = $('#item-id').val();
      const data = {
        partner_firmname: $('#item-partner_firmname').val(),
        product: $('#item-product').val(),
        price: $('#item-price').val(),
        quantity: $('#item-quantity').val(),
        status: $('#item-status').val(),
        date: $('#item-date').val()
      };
      let url, type;
      if (id) {
        url = `{{ path('api_director_orders_update', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', id);
        type = 'PUT';
      } else {
        url = `{{ path('api_director_orders_create') }}`;
        type = 'POST';
      }
      $.ajax({
        url: url,
        type: type,
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function(response) {
          itemModal.hide();
          $('#dynamic-table').bootstrapTable('refresh', {pageNumber: 1});
        },
        error: function(xhr) {
          alert('Ошибка при сохранении!');
        }
      });
    });

    // Удаление строки
    $(document).on('click', '.delete-row', function() {
      if (!confirm('Вы уверены, что хотите удалить эту запись?')) return;
      const productId = $(this).data('id');
      const url = `{{ path('api_director_orders_delete', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', productId);

      $.ajax({
        url: url,
        type: 'DELETE',
        success: function(response) {
          $('#dynamic-table').bootstrapTable('refresh', {pageNumber: 1});
        },
        error: function(xhr) {
          alert('Ошибка при удалении!');
        }
      });
    });

    // Оставляем инлайн-редактирование, если нужно
    $(document).on('click', '.editable-span', function() {
      const $span = $(this);
      const $tr = $span.closest('tr');
      const rowIndex = $tr.data('index');
      const rowData = $('#dynamic-table').bootstrapTable('getData')[rowIndex];
      const field = $span.data('field');

      // Разрешаем инлайн-редактирование только для нужных статусов
      if (rowData.status !== 'Order recieved' && rowData.status !== 'Order processing' && field !== 'status') {
        return;
      }

      if (field === 'status' && rowData.status !== 'Order closed') {
        // Только для статуса — показываем select
        const current = rowData.status;

        let options = [];
        if (rowData.status === 'Order recieved' || rowData.status === 'Order processing') {
          options = [
          {value: 'Order recieved', label: 'Принято'},
          {value: 'Order processing', label: 'Обработка'},
            {value: 'Order approved', label: 'Утверждено'},
            {value: 'Order closed', label: 'Закрыто'}
          ];
        } else {
          options = [
            {value: current, label: allStatuses.find(s => s.value === current)?.text},
            {value: 'Order closed', label: 'Закрыто'}
          ];
        }
        let selectHtml = `<select class="form-select editable-select" data-field="status" style="width: 100%; display:inline;">`;
        options.forEach(opt => {
          selectHtml += `<option value="${opt.value}"${opt.value === current ? ' selected' : ''}>${opt.label}</option>`;
        });
        selectHtml += `</select>`;
        $span.replaceWith(selectHtml);
        $('.editable-select').focus();
        return;
      }

      // Обычное поведение для других полей
      const value = $span.text().replace(/[\u{1F58A}-\u{1F58C}]|<svg[\s\S]*?<\/svg>/gu, '').trim();
      let inputType = 'text';
      let step = '';
      if (field === 'quantity' || field === 'price') {
        inputType = 'number';
        step = 'step="0.01"';
      }
      $span.replaceWith(
        `<input type="${inputType}" class="form-control editable-input" data-field="${field}" value="${value}" ${step} style="width: 100%; display:inline;">`
      );
      $('.editable-input').focus();
    });

    // Сохранение нового статуса
    $(document).on('change', '.editable-select', function() {
      saveEdit($(this));
    });
    $(document).on('blur', '.editable-select', function() {
      saveEdit($(this));
    });

    function saveEdit($input) {
      const newValue = $input.val();
      const field = $input.data('field');
      const $tr = $input.closest('tr');
      const rowIndex = $tr.data('index');
      const rowData = $('#dynamic-table').bootstrapTable('getData')[rowIndex];
      const productId = rowData.order_id;
      const url = `{{ path('api_director_orders_update', {'id': 'PATTERN0'}) }}`.replace('PATTERN0', productId);

      let data = {};
      data[field] = newValue;

      $.ajax({
        url: url,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function(response) {
          $('#dynamic-table').bootstrapTable('refresh', {pageNumber: 1});
        },
        error: function(xhr) {
          alert('Ошибка при обновлении!');
        }
      });

      $input.replaceWith(editableFormatter(newValue, rowData, rowIndex, field));
    }

    $(document).on('click', '.date-filter-btn', function() {
      $('#dateFilterModal').modal('show');
    });
    $('#apply-date-filter-btn').on('click', function() {
      // Здесь логика применения фильтра и обновления таблицы
      // Например:
      dateFromFilter = $('#date-from').val();
      dateToFilter = $('#date-to').val();
      $('#dateFilterModal').modal('hide');
      $('#dynamic-table').bootstrapTable('refresh', {pageNumber: 1});
    });

    // Кнопка фильтра по статусу
    $(document).on('click', '.status-filter-btn', function() {
      $('#statusFilterModal').modal('show');
    });
    $('#apply-status-filter-btn').on('click', function() {
      statusFilter = $('#status-filter-select').val();
      $('#statusFilterModal').modal('hide');
      $('#dynamic-table').bootstrapTable('refresh', {pageNumber: 1});
    });

    // Обработчик кнопки скачивания CSV-отчёта с учётом фильтров, поиска и сортировки
    $('#download-excel-btn').on('click', function() {
      // Получаем параметры фильтрации, поиска и сортировки
      const tableOpts = $('#dynamic-table').bootstrapTable('getOptions');
      const params = {
        status: statusFilter,
        date_from: dateFromFilter,
        date_to: dateToFilter,
        search: tableOpts.searchText || '',
        sort: tableOpts.sortName || '',
        order: tableOpts.sortOrder || ''
      };
      const query = $.param(params);
      window.open(`{{ path('api_director_orders_report_excel') }}?${query}`, '_blank');
    });

    // Обработчик кнопки скачивания PDF-отчёта с учётом фильтров, поиска и сортировки
    $('#download-pdf-btn').on('click', function() {
      const tableOpts = $('#dynamic-table').bootstrapTable('getOptions');
      const params = {
        status: statusFilter,
        date_from: dateFromFilter,
        date_to: dateToFilter,
        search: tableOpts.searchText || '',
        sort: tableOpts.sortName || '',
        order: tableOpts.sortOrder || ''
      };
      const query = $.param(params);
      window.open(`{{ path('api_director_orders_report_pdf') }}?${query}`, '_blank');
    });
  });
})();